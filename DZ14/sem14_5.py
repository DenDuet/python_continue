# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
# —Ö—Ä–∞–Ω—è—â–∏–π –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É, –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä,
# –ø–ª–æ—â–∞–¥—å –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å
# –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.

import unittest


class Square:
    """–í –∫–ª–∞—Å—Å–µ —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–º–µ—Ç—Ä –∏ –ø–ª–æ—â–∞–¥—å –ø–æ –ø—Ä–∏–Ω—è—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º —Å—Ç–æ—Ä–æ–Ω."""

    def __init__(self, long, width=0):
        """–í —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç."""
        self.long = long
        if width == 0:
            self.width = long
        else:
            self.width = width

    def sqr(self):
        """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞."""
        return self.long * self.width

    def perim(self):
        """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞."""
        return 2 * (self.long + self.width)

    def __add__(self, other):
        """–§—É–Ω–∫—Ü–∏—è —Å—É–º–º–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∞—Å—Å–∞."""
        new_perim = self.perim() + other.perim()
        new_long = self.long
        new_width = new_perim / 2 - new_long
        return Square(new_long, new_width)

    def __sub__(self, other):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Ç–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∞—Å—Å–∞."""
        new_perim = abs(self.perim() - other.perim())
        new_long = min([self.long, self.width, other.long, other.width])
        new_width = new_perim / 2 - new_long
        return Square(new_long, new_width)


class TestRectangle(unittest.TestCase):
    def setUp(self):
        self.rect1 = Square(2, 5)
        self.rect2 = Square(2, 2)

    def test_method(self):
        self.assertEqual(self.rect2.long, 2)
        self.assertEqual(self.rect2.width, 2)

    def test_square(self):
        self.assertEqual(self.rect1.sqr(), 10)

    def test_perimetr(self):
        self.assertEqual(self.rect2.perim(), 8)

    def test_sub(self):
        self.assertEqual((self.rect1 - self.rect2).perim(), 6)



if __name__ == "__main__":
    unittest.main(verbosity=2)