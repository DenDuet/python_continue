# üìå –í–æ–∑—å–º–∏—Ç–µ 1-3 –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –±—ã–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª—ã—Ö
# —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –∏–ª–∏ –≤ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫ –Ω–∏–º —Ç–µ—Å—Ç—ã.
# üìå 2-5 —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞—á—É –≤ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:
# ‚óã doctest,
# ‚óã unittest,
# ‚óã pytest.

import pytest
     
        
def factorial(n):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º >= 0.

    >>> [factorial(n) for n in range(6)]
    [1, 1, 2, 6, 24, 120]
    >>> factorial(30)
    265252859812191058636308480000000
    >>> factorial(-1)
    Traceback (most recent call last):
        ...
    ValueError: n must be >= 0

    >>> factorial(30.1)
    Traceback (most recent call last):
        ...
    ValueError: n must be exact integer

    –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —á–∏—Å–ª–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º:
    >>> factorial(1e100)
    Traceback (most recent call last):
        ...
    OverflowError: n too large
    """

    import math

    if not n >= 0:
            raise ValueError("n must be >= 0")
    if math.floor(n) != n:
            raise ValueError("n must be exact integer")
    if n+1 == n: # –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ 1e300
            raise OverflowError("n too large")
    result = 1
    factor = 2
    while factor <= n:
        result *= factor
        factor += 1
    return result

def test_method_int():
        assert factorial(6) == 720

def test_method_int_range():
        assert [factorial(n) for n in range(6)] == [1, 1, 2, 6, 24, 120]
        
def test_method_otr():
        # self.assertRaisesRegex(ValueError,factorial(-1), 'n must be >= 0')        
        with pytest.raises(ValueError):
            factorial(-1)
    
def test_method_big():
        with pytest.raises(OverflowError):
            factorial(1e100)

def test_method_float():
        with pytest.raises(ValueError):
            factorial(30.1)


if __name__ == "__main__":
    pytest.main(["-v"])