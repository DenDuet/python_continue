# üìå –í–æ–∑—å–º–∏—Ç–µ 1-3 –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
# –¥–∞–Ω–Ω—ã—Ö), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ —Ä–µ—à–∞–ª–∏. –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞, –∞
# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–≤–æ–π—Å—Ç–≤–∞. –ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤
# —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.

from random import randint

class Chess:
    def __init__(self):
        self.queen = self.rand_queen() 
        
    def chess(self,queen):
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ñ–µ—Ä–∑–µ–π (queen) –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, 
        —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è False –∏–Ω–∞—á–µ True"""
        for i in range(0,8):
            for j in range(i+1,8):
                if queen[i][0] == queen[j][0]:
                    return False
                elif queen[i][1] == queen[j][1]:
                    return False
                elif abs(queen[i][0] - queen[j][0]) == abs(queen[i][1] - queen[j][1]):
                    return False
        else:
            return True
        
    def rand_queen(self):
        """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–µ—Ä–∑–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é
        chess –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç."""
        _COUNT = 4
        count = _COUNT
        queen_count = []
        while count > 0:
            queen = []
            for i in range(1,9):
                queen.append([i,randint(1,8)])
            res = self.chess(queen)
            if res:
                print(f"{_COUNT-count+1}. –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–µ—Ä–∑–µ–π —Å —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: \n{queen} \n–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –Ω–∏—Ö.\n")
                count-=1
                queen_count.append(queen)            
        return queen_count

if __name__ == "__main__":
    queen = Chess()