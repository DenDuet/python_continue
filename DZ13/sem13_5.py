# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ 3 –∏ 4. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π
# –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:
# üìå –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∑–∞–¥–∞–Ω–∏—è 4)
# üìå –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É - —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è
# –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
# –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
# –¥–æ—Å—Ç—É–ø–∞. –ê –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏–∑
# –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –º–µ–Ω—å—à–µ, —á–µ–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
# –¥–æ—Å—Ç—É–ø–∞.

import json
import os
from sem13_3 import LevelError, AccessError

class Access:
    def __init__(self):
        self.FILE_NAME = 'data.json'
        self.dic = self._json_read()
        self.users = self._start_auth(self.dic)
        self.print_users()
        self.log_in = []
        
    def _json_read(self):
        """–§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –ª–∏–±–æ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å"""
        if os.path.exists(self.FILE_NAME) & len(self.FILE_NAME) > 0:
            with open(self.FILE_NAME,'r',encoding="UTF-8") as fjs:
                dic = json.load(fjs)
        else:
            dic = {}
        return dic
    
    def _write_json(self,dic, fname = 'data.json'):
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª"""
        with open(fname,'w',encoding="UTF-8") as fjs:
            json.dump(dic, fjs)   
            
    def _json_update(self, name: str, persid: str, level: str):
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ json —Ñ–∞–π–ª"""
        # dic = json_read('data.json')
        if len(self.dic) > 0:
            for key, value in self.dic.items():
                if key == str(level):
                    value.setdefault(persid, name)
                    break
            else:
                self.dic.setdefault(level,{persid: name})
        else:
            self.dic.setdefault(level,{persid: name})
        # print(dic)
        return self.dic 
    
    def __str__(self):
        out = ""
        for string in self.users:
            out = out + str(string)+"\n" 
        return out
    
    def __repr__(self):
        out = ""
        for i in range(len(self.users)):
            # print(self.users[i].name,self.users[i].persid,self.users[i].level)
            out = out + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.users[i].name}, –µ–≥–æ id = {self.users[i].persid}, –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å {self.users[i].level}\n"
        return out
    
    def _start_auth(self,dic) -> list:
        users = []
        if len(dic)>0:
            for key,value in dic.items():
                for key1, value1 in value.items():
                    users.append(User(value1,key1,key))
            # print(*(str(string)+"\n" for string in users))
        return users   
     
    def _check_dic(self,dic, persid):
        """"""
        if len(dic) > 0:
            for key, value in dic.items():
                for key1, value1 in value.items():
                    if key1 == persid:
                        return False
            else: 
                return True
        else:
            return True

    def _add_user(self) -> list:
        name_user = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ")
        uid_user = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à id: ")
        level_user = None
        for name,uid,level in self.log_in:
            if name == name_user and uid == uid_user:
                level_user = level  
        if level_user == '1':
            name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
            while True:
                persid = str(input("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: "))
                if self._check_dic(self.dic, persid):
                    break 
            while True:
                level = int(input("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (1..7): "))
                if 0 < level < 8:
                    break      
            self.users.append(User(name,persid,level))  
            self._json_update(name, persid, level)
            self._write_json(self.dic)
            return self.users    
        else:
            raise LevelError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name_user} –∏–º–µ–µ—Ç {level_user} —É—Ä–æ–≤–µ–Ω—å. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å =1")
        
    def print_users(self):
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å             id     level")
        for i in range(len(self.users)):
            print(f"{self.users[i].name:<20}    {self.users[i].persid:<5}   {self.users[i].level:<5}")

    def _log_in(self,name,uid,level):
        self.log_in.append([name,uid,level])
        return self.log_in    
            
    def check_access(self):
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        uid = input("–í–≤–µ–¥–∏—Ç–µ id: ")
        temp_user = User(name,uid,"0")
        if temp_user in self.users:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ")
            for i in range(len(self.users)):
                # print(i, self.users[i].name,self.users[i].persid,self.users[i].level)
                if self.users[i].name == name:
                    return name,uid,self.users[i].level    
        else:
            raise AccessError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
    
class User:
    def __init__(self,name,persid,level):
        self.name = name
        self.persid = persid
        self.level = level
        
    def __str__(self):
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.name}, –µ–≥–æ id = {self.persid}, –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å {self.level}"
    
    def __repr__(self):
        return self
    
    def __eq__(self,other):
        return self.name == other.name and self.persid == other.persid
            
    
if __name__ == "__main__":
    users = Access()
    name,uid,level = users.check_access()
    users._log_in(name,uid,level)
    # log_in.append([name,uid,level])
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –ï–≥–æ —É—Ä–æ–≤–µ–Ω—å = {level}. –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {users.log_in}")
    
    users._add_user()
    print(f"–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ")
    users.print_users()
    
